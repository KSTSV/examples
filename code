# создание класса с форматированием текста для красивого вывода текста
class color:
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    DARKCYAN = '\033[36m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'
    
# две функции, проверяющие какой тип ответа на вопрос
# S - один правильный ответ, M - несколько правильныхответов
def is_single_ans(lst: list) -> bool: return(lst[0] == "S")
def is_mult_ans(lst: list) -> bool: return(lst[0] == "M")

def dict_of_answers(lst: list) -> dict:
    """ 
    Функция создает словарь правильных ответов.
    Ключами словаря являются номера вопросов в формате строки, 
    которые следуют после буквы А, которая означает начало строки с правильными ответами.
    Значениями является списки правильных ответов, написанные после номера вопроса.
    Все элементы словаря не содержат лишних знаков. 
    """
    sl_answers = {}
    for i in lst:
        i = i.strip("\n").strip()
        if i.startswith("S/ A") or i.startswith("M/ A"):
            sl_answers[i[4:6].strip(":")] = i[7:].strip()
    return(sl_answers)



def is_correct_for_single_var(answer: set, number:str) -> int :
    """ 
    Функция проверяет правильность ответов пользователя 
    для вопросов с единственным вариантом ответа.
    """
    counter, sm = 1, 1 # счетчик попыток (максимум 2), общая сумма баллов за вопрос
    while answer != sl_answers[str(number.strip())]: # проверка ответа на правильность. Если ответ неверный:
        sm-= 0.5 # от общей суммы отнимается 0.5 баллов 
        if counter == 0: # если лимит попыток == 0
            break # ввод прекращается
        # иначе при неверном вводе вывод сообщения
        print(color.RED + "Ответ неверный." + color.END, f"Попробуй еще раз. Осталось попыток {counter}") 
        # повторный ввод ответа 
        answer = input('Введите единственный верный вариант ответа:') 
        counter-=1 # счетчик попыток уменьшается на 1
    if sl_answers[str(number.strip())] == answer: # если ответ верный (совпадает с значением в словаре ответов)
        print() #разделительная строка
        print(color.GREEN + "Молодец! Ответ верный." + color.END) # вывод сообщения зеленым цветом
    else: print(color.RED + "Ответ неверный." + color.END) # в ином случае, вывод сообщения красным цветом 
    return(sm) # функция возвращает итоговую сумму баллов за вопрос



def is_correct_for_mult_var(answer: set, set_of_cor_ans: set) -> int:
    """ 
    Функция проверяет правильность ответов пользователя 
    для вопросов с множетсвенными вариантами ответа.
    """
    s, counter = 3, 3 # максимальное количество попыток (3) + счетчик попыток
    for i in range(s): # три раза пользователь может ввести ответ
        summa = 0 # каждый раз сумма обнуляется - засчитывается только последняя попытка
        # ввод ответа, преварщение его в список, а затем в множество 
        answer = set(input('Введите все верные варианты ответов через пробел:').split()) 
        # если мн-во ответа совпадает с мн-вом правильных ответов 
        if  answer == set_of_cor_ans:
            # выводится соответствующее сообщение
            print(color.GREEN + "Молодец! Ответ верный." + color.END)
            summa = 2 # максимальный балл за вопрос
            break # цикл прерывается
        # если мн-во введенных ответов совпадает с мн-вом правильных ответов 
        elif len(answer & set_of_cor_ans) >= len(set_of_cor_ans) // 2:
            counter-=1 # минус 1 попытка
            # количество баллов за вопрос: доля правильных ответов в общем количестве
            # при условии, что задание весит два балла
            summa += (round(len(answer & set_of_cor_ans) / len(set_of_cor_ans), 2))*2
            # выводится соответствующее сообщение
            print(color.YELLOW + "Ответ частично верный." + color.END, f"Попробуй еще раз. Осталось попыток {counter}")    
        else: # во всех других случаях
            summa = 0 # сумма баллов равна нулю 
            counter-=1 # минус 1 попытка
            # выводится соответствующее сообщение
            print(color.RED + "Ответ неверный." + color.END, f"Попробуй еще раз. Осталось попыток {counter}") 
    return summa # функция возвращает количество баллов за задание 

        
def text_result(percentage_of_correct: int) -> str:
    """ 
    Функция выводит тестовый результат в зависимости от количества набранных баллов.
    Также функция выводит долю правильных ответов и округленную оценку
    """
    if percentage_of_correct >= 80:
        print(color.BOLD + "Отличный результат!" + color.END)
    elif  80 > percentage_of_correct >= 60:
        print(color.BOLD + "Хороший результат!" + color.END)     
    elif 60 > percentage_of_correct >= 40:
        print(color.BOLD + "Неплохой результат! Но ты можешь лучше:)" + color.END)
    elif 40 > percentage_of_correct >= 0:
        print(color.BOLD + "Стоит повторить материал и пройти викторину заново:)" + color.END)
        
    print(f"Доля правильных ответов: {percentage_of_correct}%")        
    print(f"Оценка: {round(percentage_of_correct / 10)}")
    print()
    print(color.BOLD + "Спасибо за участие и удачи на экзамене" + color.END)
    
f = open("text_questions.txt") # открытие файла с вопросами
quest = f.readlines() # создание списка со строками файла
f.close() # закрытие файла с вопросами
sl_answers = dict_of_answers(quest) # создание словаря с правильными ответами
total_points = 0 # счетчик баллов за вопросы

# подсчет максимального количества баллов за все вопросы
sum_of_total_points = 0 # изначально она равна нулю 
for i in sl_answers: # для каждого ключа словаря с правильными ответами
    # если ответ в данном вопросе один (длиина значения == 1), то к сумме прибавляется 1
    if len(sl_answers[i]) ==1: sum_of_total_points+=1 
    else: sum_of_total_points+=2 # инчае прибавляется 2
    
# код вывода вопросов
print("""Привет! 
Сейчас тебе предстоит поучаствовать в викторине, 
которая поможет тебе подготовится к экзамену по Питону. 
В некоторых вопросах требуется выбрать один ответ, 
а в некоторых правильных ответов может быть несколько.
Чтобы начать, введи любой символ в следующее окно""")
print()

if input("Введи любой символ, чтобы начать тест:"):


    for i in range(len(quest)): # проход по кажому элементу списка из строк текста
        quest[i] = quest[i].strip("\n") # проход по кажому элементу списка из строк текста
        if "Вопрос" in quest[i]: # если в строке есть слово "Вопрос"
            number = quest[i][14:16] # в переменную number записывается номер вопроса 

        # если вопрос из категории "S" (один верный вариант ответа)   
        if is_single_ans(quest[i]) == True: 
            # условие, которое позволяет НЕ выводить строку в которой содержатся правильные ответы
            if quest[i][3] == "A": 
                answer = input('Введите единственный верный вариант ответа:') # ввод ответа
                points = is_correct_for_single_var(answer, number) # посчет кол-ва баллов за ответ
                total_points += points # прибавление кол-ва баллов к общей сумме
                print() # вывод пустой строки
            else:
                # вывод всех строк до строки, которая содержит правильные ответы
                print(quest[i][3:].strip("\n"))  

        # если вопрос из категории "M" (более одного верного варианта ответа)
        elif is_mult_ans(quest[i]) == True:
            # условие, которое позволяет НЕ выводить строку в которой содержатся правильные ответы
            if quest[i][3] == "A":
                # создание множества с правильными вариантами ответа
                set_of_cor_ans = set((sl_answers[str(number.strip())]).split())
                # ввод ответа + посчет суммы баллов за вопрос
                points = is_correct_for_mult_var(answer, set_of_cor_ans)
                total_points += points # прибавление кол-ва баллов к общей сумме
                print() # вывод пустой строки
            else:
                # вывод всех строк до строки, которая содержит правильные ответы
                print(quest[i][3:].strip("\n"))

    # процент правильных ответов от общей суммы
    percentage_of_correct = round(total_points / sum_of_total_points * 100)
    # вывод текстового результата
    text_result(percentage_of_correct)  
